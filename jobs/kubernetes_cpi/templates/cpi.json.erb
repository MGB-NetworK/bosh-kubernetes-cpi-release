<%=

params = {
  "Kube" => {
    "Namespace" => p("namespace"),
    "ImagePullSecretName" => p("image_pull_secret_name"),
  },

  "Registry" => {},

  "Docker" => {
    "host"        => p("docker.host"),
    "api_version" => p("docker.api_version"),
  },

  "Agent" => {
    "NTP" => p("ntp")
  }
}

kube = params["Kube"]
if p("service_account.enabled")
  kube["OverrideAPIHost"] = p("service_account.override_api_host")
  kube["OverrideAPIPort"] = p("service_account.override_api_port")
else
  kube["Config"] = p("config")
end

registry = params["Registry"]
case p("registry.backend")
when "none"
  # noop
when "docker-no-auth"
  registry["host"] = p("registry.host", "")
  registry["pull_host"] = p("registry.pull_host")
  registry["stemcell_image_name"] = "anonymous/bosh-io-stemcells"
when "docker"
  registry["host"] = p("registry.host", "")
  registry["pull_host"] = p("registry.pull_host")
  registry["stemcell_image_name"] = p("registry.auth.username") + "/bosh-io-stemcells"

  registry["auth"] = {
    "url"      => p("registry.auth.url", "https://registry.hub.docker.com"),
    "username" => p("registry.auth.username"),
    "password" => p("registry.auth.password"),
  }
when "gcr"
  # https://cloud.google.com/container-registry/docs/advanced-authentication#using_a_json_key_file
  registry["host"] = p("registry.host", "gcr.io")
  registry["pull_host"] = p("registry.pull_host")

  begin
    key = JSON.parse(p("registry.auth.password"))
    registry["stemcell_image_name"] = key["project_id"] + "/bosh-io-stemcells"
  rescue => e
    raise "Parsing 'registry.auth.password' as JSON: #{e.inspect}"
  end

  registry["auth"] = {
    "url"      => p("registry.auth.url", "https://gcr.io"),
    "username" => "_json_key",
    "password" => p("registry.auth.password"),
  }
else
  raise "Unknown 'registry.auth.provider' value"
end

docker = params["Docker"]
if docker.fetch("host") != ""
  if !docker.fetch("host").start_with?("unix://")
    docker["tls"] = {
      "ca"          => p("docker.tls.ca"),
      "certificate" => p("docker.tls.certificate"),
      "private_key" => p("docker.tls.private_key"),
    }
  end
end

agent_params = params["Agent"]

if_p("blobstore") do
  agent_params["blobstore"] = {
   "provider" => p("blobstore.provider"),
   "options" => {}
  }

  blobstore = agent_params["blobstore"]

  if p("blobstore.provider") == "s3"
    blobstore["options"] = {
      "bucket_name" => p("blobstore.bucket_name"),
      "credentials_source" => p(["agent.blobstore.credentials_source", "blobstore.credentials_source"]),
      "access_key_id" => p(["agent.blobstore.access_key_id", "blobstore.access_key_id"], nil),
      "secret_access_key" => p(["agent.blobstore.secret_access_key", "blobstore.secret_access_key"], nil),
    }

    def update_blobstore_options(blobstore, manifest_key, rendered_key=manifest_key)
      value = p(["agent.blobstore.#{manifest_key}", "blobstore.#{manifest_key}"], nil)
      blobstore["options"][rendered_key] = value unless value.nil?
    end

    update_blobstore_options(blobstore, "use_ssl")
    update_blobstore_options(blobstore, "s3_port", "port")
    update_blobstore_options(blobstore, "host")
    update_blobstore_options(blobstore, "s3_force_path_style")
    update_blobstore_options(blobstore, "ssl_verify_peer")
    update_blobstore_options(blobstore, "s3_multipart_threshold")
    update_blobstore_options(blobstore, "s3_signature_version", "signature_version")
    update_blobstore_options(blobstore, "s3_region", "region")

  elsif p("blobstore.provider") == "local"
    blobstore["options"] = {
      "blobstore_path" => p("blobstore.path")
    }
  else
    blobstore["options"] = {
      "endpoint" => "http://#{p(["agent.blobstore.address", "blobstore.address"])}:#{p("blobstore.port")}",
      "user" => p("blobstore.agent.user"),
      "password" => p("blobstore.agent.password")
    }
  end
end

if_p("agent.mbus") do |mbus|
  agent_params["mbus"] = mbus
end.else_if_p("nats") do
  agent_params["mbus"] = "nats://#{p("nats.user")}:#{p("nats.password")}@#{p(["agent.nats.address", "nats.address"])}:#{p("nats.port")}"
end

JSON.dump(params)

%>
